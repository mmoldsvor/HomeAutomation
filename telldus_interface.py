from requests_oauthlib import OAuth1Session
import pprint


class TelldusInterface:
    def __init__(self, public_key, private_key, token, token_secret, base_url='https://api.telldus.com', logging=None):
        """
        Interface between the Telldus API
        :param public_key: The public KEY generated by the Telldus API
        :param private_key: The private KEY generated by the Telldus API
        :param token: The token generated by the Telldus API
        :param token_secret: The token secret KEY generated by the Telldus API
        :param base_url: Telldus API URL
        """
        self.public_key = public_key
        self.private_key = private_key
        self.token = token
        self.token_secret = token_secret

        self.base_url = base_url

        self.oauth = self.generate_temp_session()

        self.logging = logging

        # Unused tue do bug in telldus oauth handling
        """
        self.oauth = OAuth1Session(client_key=self.public_key, client_secret=self.private_key)

        self.resource_owner_key, self.resource_owner_secret = self.request_token()
        self.verifier = self.authorize()

        self.oauth = OAuth1Session(client_key=self.public_key,
                                   client_secret=self.private_key,
                                   resource_owner_key=self.resource_owner_key,
                                   resource_owner_secret=self.resource_owner_secret,
                                   verifier=self.verifier)
        self.access_token()
        """

    def generate_temp_session(self):
        """
        Generates a temporary OAuthSession to authenticate requests
        :return: OAuthSession
        """
        return OAuth1Session(client_key=self.public_key,
                             client_secret=self.private_key,
                             resource_owner_key=self.token,
                             resource_owner_secret=self.token_secret)

    def list_devices(self):
        """
        Prints information about every device available
        :return:
        """
        response = self.oauth.get(url=f'{self.base_url}/json/devices/list')

        result = response.json()['device']
        for device in result:
            pprint.pprint(device)

    def load_devices(self):
        """
        Gets all information needed from device list
        :return: list - [id:str, name:str, state:str]
        """
        response = self.oauth.get(url=f'{self.base_url}/json/devices/list')

        result = response.json()['device']
        return [(device['id'], device['name'], device['state']) for device in result]

    def request_action(self, request, data):
        """
        Sends an API request to the Telldus api
        :param request: str - Request added to the base url
        :param data: str - Parameters passed to the POST request
        :return: Response from the server
        """
        response = self.oauth.post(url=f'{self.base_url}/json/{request}', data=data)

        return response.json()

    # Unused tue do bug in telldus oauth handling
    def request_token(self):
        fetch_response = self.oauth.fetch_request_token(f'{self.base_url}/oauth/requestToken')

        return fetch_response.get('oauth_token'), fetch_response.get('oauth_token_secret')

    def authorize(self):
        authorization_url = self.oauth.authorization_url(f'{self.base_url}/oauth/authorize')
        print(f'Please go to URL and authorize: {authorization_url}')
        redirect_response = input('Paste full redirect URL here: ')
        oauth_response = self.oauth.parse_authorization_response(redirect_response)

        return oauth_response.get('oauthRand')

    def access_token(self):
        self.oauth.fetch_access_token(f'{self.base_url}/oauth/accessToken', self.verifier)
        oauth_tokens = self.oauth.fetch_access_token(f'{self.base_url}/oauth/accessToken')

        self.resource_owner_key = oauth_tokens.get('oauth_token')
        self.resource_owner_secret = oauth_tokens.get('oauth_token_secret')


if __name__ == '__main__':
    tellstick_interface = TelldusInterface(public_key='FEHUVEW84RAFR5SP22RABURUPHAFRUNU',
                                           private_key='ZUXEVEGA9USTAZEWRETHAQUBUR69U6EF',
                                           token='0021b7dcce4e498e29080b14029485e705d74c6ff',
                                           token_secret='6b2abf23dc637c611a47917ca176441b')
